https://www.cnblogs.com/zuoxiaolong/p/pattern13.html
https://github.com/JackChan1999/DesignPattern/tree/master/command
一、定义与说明
	1、
	在软件系统中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，
	这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将“行为请求者”与“行为实现者”解耦？将一组行为抽象为对象，实现二者之间的松耦合。
	这就是命令模式（Command Pattern）。
	2、
	系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。
	系统需要在不同的时间指定请求、将请求排队和执行请求。
	系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。
	系统需要将一组操作组合在一起，即支持宏命令。
	二、模式例子
	1、生活中业务员--产品经理--开发人员，就是一个比较明显的例子，产品经理充当命令者的角色，使业务员跟开发人员解耦。
	2、
	命令角色（Command）：定义命令的接口，声明具体命令类需要执行的方法。这是一个抽象角色。

	具体命令角色（ConcreteCommand）：命令接口的具体实现对象，通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。

	调用者角色（Invoker）：负责调用命令对象执行请求，通常会持有命令对象（可以持有多个命令对象）。Invoker是Client真正触发命令并要求命令执行相应操作的地方（使用命令对象的入口）。

	接受者角色（Receiver）：Receiver是真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。

	客户角色（Client）：Client可以创建具体的命令对象，并且设置命令对象的接收者。Tips：不能把Clinet理解为我们平常说的客户端，这里的Client是一个组装命令对象和接受者对象的角色，或者你把它理解为一个装配者。
	三、好处
	1、


